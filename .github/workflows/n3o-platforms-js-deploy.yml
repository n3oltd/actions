name: 'Deploy Platforms JS'

on:
  workflow_call:
    inputs:
      data-region:
        type: string
        required: true

      subscription-code:
        type: string
        required: true
      
      environment-id:
        type: string
        required: true

env:
  GH_PAT: ${{ secrets.GH_PACKAGES_TOKEN }}

jobs:
  deploy-platforms:
    name: Deploy Platforms
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            ${{ inputs.data-region }}/platforms-js/${{ inputs.environment-id }}

      - id: latest-json-metadata
        name: Read latest JSON metadata
        working-directory: platforms-js/${{ inputs.environment-id }}/latest
        run: |
          packageVersion=$(jq -r '.packageVersion' metadata.json)
          echo "packageVersion=packageVersion" >> $GITHUB_OUTPUT
    
      - name: install platforms package
        run: |
          mkdir work-dir
          cd work-dir
          echo '{}' > package.json
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_PACKAGES_TOKEN }}" >> .npmrc
          echo "@n3oltd:registry=https://npm.pkg.github.com" >> .npmrc
          npm install "@n3oltd/platforms-js-${{ inputs.subscription-code }}@${{ steps.latest-json-metadata.outputs.deploymentVersion }}"
          
      - name: Fetch config.json (Production)
        if: ${{ inputs.environment-id == 'prod' }}
        run: |
          cp work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms/config/config.prod.json work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms/config.json
          
      - name: Copy config.json (QA)
        if: ${{ inputs.environment-id == 'qa' }}
        run: |
          cp work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms/config/config.qa.json work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms/config.json

      - name: Copy config.json (Staging)
        if: ${{ inputs.environment-id == 'staging' }}
        run: |
          cp work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms/config/config.staging.json work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms/config.json

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds:  ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Storage Connection String
        run: |
          if [ "${{ inputs.environment-id }}" = "prod" ]; then
            echo "storage_connection_string=${{ secrets.AZURE_STORAGE_CONNECTION_STRING_PROD }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment-id }}" = "qa" ]; then
            echo "storage_connection_string=${{ secrets.AZURE_STORAGE_CONNECTION_STRING_QA }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment-id }}" = "staging" ]; then
            echo "storage_connection_string=${{ secrets.AZURE_STORAGE_CONNECTION_STRING_STAGING }}" >> $GITHUB_ENV
          else
            echo "Invalid environment: ${{ inputs.environment-id }}"
            exit 1
          fi

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.66.0
          inlineScript: |
            az storage blob delete-batch --connection-string "${{ env.storage_connection_string }}" --source "connect-${{ env.subscription_code }}"  --pattern "platforms-js/*" 
            az storage blob upload-batch --connection-string="${{ env.storage_connection_string }}" --destination="connect-${{ env.subscription_code }}" --source="work-dir/node_modules/@n3oltd/platforms-js-${{ inputs.subscription-code }}/dist/platforms" --destination-path="platforms-js" --overwrite="true"
        env:
          subscription_code: "${{ inputs.subscription-code }}"
          